/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cliente.pres.reservaciones;

import java.awt.Frame;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author otzoy
 */
public class Carga extends javax.swing.JInternalFrame {

    private JFileChooser fch;
    private final Frame padre;
    private com.cliente.pres.Lista<com.cliente.pres.Elemento> indice;

    /**
     * Creates new form Carga
     *
     * @param padre
     */
    public Carga(Frame padre) {
        initComponents();
        this.padre = padre;
        //Inicializa el selector de archivos
        this.fch = new JFileChooser();
        this.fch.setDialogTitle("Abrir...");
        FileNameExtensionFilter ExtensionFilter = new FileNameExtensionFilter("Archivo separado por comas CSV", new String[]{"csv", "CSV"});
        //Coloca un filtro para que solo permita abrir archivos CSV
        this.fch.setFileFilter(ExtensionFilter);
        indexar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        lblReservacion = new javax.swing.JLabel();
        btnReserva = new javax.swing.JButton();

        setClosable(true);
        setTitle("Carga reservaciones");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/res/location.png"))); // NOI18N
        setMaximumSize(new java.awt.Dimension(555, 90));
        setMinimumSize(new java.awt.Dimension(555, 90));
        setPreferredSize(new java.awt.Dimension(555, 90));
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cargar reservaciones", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Microsoft Sans Serif", 0, 12))); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        lblReservacion.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        lblReservacion.setForeground(new java.awt.Color(153, 153, 153));
        lblReservacion.setText("Presiona aquí para seleccionar un archivo");
        lblReservacion.setToolTipText("");
        lblReservacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblReservacionMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(lblReservacion, gridBagConstraints);

        btnReserva.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        btnReserva.setText("Cargar.");
        btnReserva.setToolTipText("");
        btnReserva.setEnabled(false);
        btnReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReservaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(btnReserva, gridBagConstraints);

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblReservacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblReservacionMouseClicked
        // TODO add your handling code here:
        if (this.fch.showOpenDialog(padre) == JFileChooser.APPROVE_OPTION) {
            this.lblReservacion.setText(this.fch.getSelectedFile().getAbsolutePath());
            this.btnReserva.setEnabled(true);
        } else {
        }
    }//GEN-LAST:event_lblReservacionMouseClicked

    private void btnReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReservaActionPerformed
        // TODO add your handling code here:
        cargarReservacion(this.lblReservacion.getText());
        this.lblReservacion.setText("Presiona aquí para seleccionar un archivo");
        this.btnReserva.setEnabled(false);
    }//GEN-LAST:event_btnReservaActionPerformed

    /**
     * Carga las reservaciones del archivo seleccionado
     * @param URL 
     */
    public void cargarReservacion(String URL) {
        String l, csv[];
        BufferedReader br = null;
        StringBuilder responseLog = new StringBuilder();
        StringBuilder lviaje;
        indexar();
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(URL)), StandardCharsets.UTF_8));
            while ((l = br.readLine()) != null) {
                lviaje = new StringBuilder();
                csv = l.split(",");
                int idReservacion = Integer.parseInt(csv[1]);
                //Se asegura que la llave no existe previamente
                while (verificarLlave(idReservacion)) {
                    idReservacion++;
                }
                //Recorre el resto del arreglo buscando y agregando el nombre de los archivos
                for (int i = 4; i < csv.length; i++) {
                    String n = buscar(Integer.parseInt(csv[i]));
                    lviaje.append(n != null ? (n+  ( i+1 <csv.length ? "," : "")  ) : "CV");
                }
                //Elimina la ultima coma
                System.out.println(lviaje.toString());
                
                responseLog.append(agregarReservacion(idReservacion,csv[0], Float.valueOf(csv[2]), Float.valueOf(csv[3]), lviaje.toString())).append("\n");
            }
        } catch (IOException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(padre, "Ocurrió un error al leer el archivo. Por favor verifique su sintaxis.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(padre, ex.getMessage(), "Error", JOptionPane.WARNING_MESSAGE);
        } finally {
            try {
                if (br != null) {
                    br.close();
                }
            } catch (IOException ex) {
            }
        }
        responseLog.append("- Operación finalizada -");
        JOptionPane.showMessageDialog(this, responseLog.toString(), "Resultado de la operación", JOptionPane.INFORMATION_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReserva;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblReservacion;
    // End of variables declaration//GEN-END:variables

    /**
     * Recupera los encabezados y los indexa 
     */
    private void indexar(){
        java.util.List<String> encabezados = recuperarEncabezados();
        int contador = 0;
        while(encabezados.isEmpty()){
            encabezados = recuperarEncabezados();
            if(contador++ == 10) break;
        }
        indice = new com.cliente.pres.Lista<>();
        String clave[];
        for(String str : encabezados){
            clave = str.split(",");
            indice.agregarAlFinal(new com.cliente.pres.Elemento(Integer.parseInt(clave[0]),clave[1]));
        }
    }
    
    /**
     * Busca en la lista el elemento con la clave
     * @param clave
     * @return 
     */
    private String buscar(int clave){
        //while(this.indice.esVacio()) {indexar();}
        for(com.cliente.pres.Elemento el : indice){
            if(el.getId() == clave)
                return el.getValue();
        }
        return null;
    }
    
    /**
     * Verifica la existencia de una llave
     * @param llave
     * @return 
     */
    private static boolean verificarLlave(int llave) {
        com.cliente.ws.reservacion.ReservacionWS_Service service = new com.cliente.ws.reservacion.ReservacionWS_Service();
        com.cliente.ws.reservacion.ReservacionWS port = service.getReservacionWSPort();
        return port.verificarLlave(llave);
    }

    /**
     * Agrega una nueva reservación
     * @param llave
     * @param nombreCliente
     * @param costo
     * @param tiempo
     * @param viaje
     * @return 
     */
    private static String agregarReservacion(int llave, java.lang.String nombreCliente, float costo, float tiempo, java.lang.String viaje) {
        com.cliente.ws.reservacion.ReservacionWS_Service service = new com.cliente.ws.reservacion.ReservacionWS_Service();
        com.cliente.ws.reservacion.ReservacionWS port = service.getReservacionWSPort();
        return port.agregarReservacion(llave, nombreCliente, costo, tiempo, viaje);
    }

    /**
     * recupera los encabezados y los deja en 
     * @return 
     */
    private static java.util.List<java.lang.String> recuperarEncabezados() {
        com.cliente.ws.ruta.RutaWS_Service service = new com.cliente.ws.ruta.RutaWS_Service();
        com.cliente.ws.ruta.RutaWS port = service.getRutaWSPort();
        return port.recuperarEncabezados();
    }
}
